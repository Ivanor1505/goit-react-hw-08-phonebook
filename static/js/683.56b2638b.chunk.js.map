{"version":3,"file":"static/js/683.56b2638b.chunk.js","mappings":"mPAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAO,E,mBCClCC,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mFAOtBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yB,SCJpBG,EAAS,WACpB,IAAMP,GAASQ,EAAAA,EAAAA,IAAYT,GACrBU,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,MAACV,EAAS,CAAAW,SAAA,EACRC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,8BACPC,EAAAA,EAAAA,KAACR,EAAK,CACJS,KAAK,OACLC,KAAK,SACLC,SAAU,SAAAC,GAAC,OAAIR,GAASS,EAAAA,EAAAA,GAAaD,EAAEE,OAAOC,OAAO,EACrDA,MAAOpB,MAIf,EClBaqB,EAASnB,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6DAMtBkB,EAAapB,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sCCJtBmB,EAAU,SAAHC,GAAqB,IAAfC,EAAOD,EAAPC,QAClBhB,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,MAACW,EAAU,CAAAV,SAAA,EACTD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CACGa,EAAQV,KAAK,KAAGU,EAAQC,WAE3Bb,EAAAA,EAAAA,KAACQ,EAAM,CACLM,QAAS,SAAAV,GAAC,OAAIR,GAASmB,EAAAA,EAAAA,IAAcX,EAAEE,OAAOU,IAAI,EAClDA,GAAIJ,EAAQI,GAAGjB,SAChB,aAKP,EClBakB,EAAO5B,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+DCKhB2B,EAAc,WACzB,IAAM/B,GAASQ,EAAAA,EAAAA,IAAYT,GACrBF,GAAWW,EAAAA,EAAAA,IAAYb,GAc7B,OACEkB,EAAAA,EAAAA,KAACiB,EAAI,CAAAlB,UAVAZ,EAIEH,EAASG,QAAO,SAAAyB,GAAO,OAC5BA,EAAQV,KAAKiB,cAAcC,SAASjC,EAAOgC,cAAc,IAJlDnC,GAUSqC,KAAI,SAAAC,GAClB,OAAOtB,EAAAA,EAAAA,KAACU,EAAO,CAAyBE,QAASU,GAA5BA,EAAeN,GACtC,KAGN,E,oBC3BaO,GAAalC,EAAAA,EAAAA,IAAOmC,EAAAA,GAAPnC,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kKAWzBkC,GAAcpC,EAAAA,EAAAA,IAAOqC,EAAAA,GAAPrC,CAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yBAI3BoC,EAAetC,EAAAA,GAAAA,OAAauC,IAAAA,GAAArC,EAAAA,EAAAA,GAAA,wFAO5BsC,EAAQxC,EAAAA,GAAAA,MAAYyC,IAAAA,GAAAvC,EAAAA,EAAAA,GAAA,uEAMpBwC,GAAqB1C,EAAAA,EAAAA,IAAO2C,EAAAA,GAAP3C,CAAoB4C,IAAAA,GAAA1C,EAAAA,EAAAA,GAAA,uBClBhD2C,EAAaC,EAAAA,GAAW,CAC5BjC,KAAMiC,EAAAA,KACHC,QACC,yHACA,gEAEDC,SAAS,oBACZxB,OAAQsB,EAAAA,KACLC,QACC,+EACA,+BAEDC,SAAS,8BAGDC,EAAiB,WAC5B,IAAM1C,GAAWC,EAAAA,EAAAA,MACXb,GAAWW,EAAAA,EAAAA,IAAYb,GAEvByD,EAAgB,SAAA3B,IAQtB,SAAwBA,GACtB,OAAO5B,EAASwD,MACd,SAAAC,GAAO,OAAI7B,EAAQV,KAAKiB,gBAAkBsB,EAAQvC,KAAKiB,aAAa,GAExE,CAXMuB,CAAe9B,GAInBhB,GAAS+C,EAAAA,EAAAA,IAAW/B,IAHlBgC,MAAM,6BAIV,EAQA,OACE5C,EAAAA,EAAAA,KAAC6C,EAAAA,GAAM,CACLC,cAAe,CACb5C,KAAM,GACNW,OAAQ,IAEVkC,iBAAkBb,EAClBc,SAAU,SAACC,EAAMtC,GAAqB,IAAjBuC,EAASvC,EAATuC,UACnBX,EAAcU,GACdC,GACF,EAAEnD,UAEFD,EAAAA,EAAAA,MAACyB,EAAU,CAAAxB,SAAA,EACTD,EAAAA,EAAAA,MAAC+B,EAAK,CAAA9B,SAAA,CAAC,QAELC,EAAAA,EAAAA,KAACyB,EAAW,CAACvB,KAAK,OAAOD,KAAK,UAC9BD,EAAAA,EAAAA,KAAC+B,EAAkB,CAAC7B,KAAK,OAAOiD,UAAU,YAE5CrD,EAAAA,EAAAA,MAAC+B,EAAK,CAAA9B,SAAA,CAAC,UAELC,EAAAA,EAAAA,KAACyB,EAAW,CAACvB,KAAK,SAASD,KAAK,SAChCD,EAAAA,EAAAA,KAAC+B,EAAkB,CAAC7B,KAAK,SAASiD,UAAU,YAE9CnD,EAAAA,EAAAA,KAAC2B,EAAY,CAAC1B,KAAK,SAAQF,SAAC,oBAIpC,ECjEe,SAASqD,IACtB,IAAMxD,GAAWC,EAAAA,EAAAA,MAMjB,OAJAwD,EAAAA,EAAAA,YAAU,WACRzD,GAAS0D,EAAAA,EAAAA,MACX,GAAG,CAAC1D,KAGFE,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAAxD,SAAA,EACEC,EAAAA,EAAAA,KAACsC,EAAc,KACftC,EAAAA,EAAAA,KAACN,EAAM,KACPM,EAAAA,EAAAA,KAACkB,EAAW,MAGlB,C","sources":["redux/phonebook/selectors.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","pages/phonebook/Phonebook.js"],"sourcesContent":["export const getAllContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getLoading = state => state.contacts.isLoading; \nexport const getError = state => state.contacts.error; \n\n","import styled from 'styled-components';\n\nexport const FilterBox = styled.div`\nmargin-left: 20px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;\n\nexport const Input = styled.input`\nwidth: 200px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/phonebook/filterSlice';\nimport { getFilter } from 'redux/phonebook/selectors';\nimport { FilterBox, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterBox>\n      <label>Filter contacts by name:</label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        value={filter}\n      />\n    </FilterBox>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\ndisplay: block;\nmargin-top: 10px;\nheight: 25px;\n`;\n\nexport const CotactItem = styled.li`\ndisplay: flex;\ngap: 20px;\n`;","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/phonebook/operations';\nimport { Button, CotactItem } from './Contact.styled';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <CotactItem>\n      <p>\n        {contact.name}: {contact.number}\n      </p>\n      <Button\n        onClick={e => dispatch(deleteContact(e.target.id))}\n        id={contact.id}\n      >\n        Delete\n      </Button>\n    </CotactItem>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;","import React from 'react';\nimport { Contact } from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { getAllContacts } from 'redux/phonebook/selectors';\nimport { getFilter } from 'redux/phonebook/selectors';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getAllContacts);\n\n  // console.log('Всі контакти:', contacts);\n\n  const filterByName = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <List>\n      {filterByName().map(filtredContact => {\n        return <Contact key={filtredContact.id} contact={filtredContact} />;\n      })}\n    </List>\n  );\n};\n","import { Form, Field, ErrorMessage } from \"formik\";\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\nmargin-left: 20px;\npadding: 10px;\nwidth: 400px;\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nborder: 2px solid black;\nborder-radius: 10px;\n`;\n\nexport const StyledField = styled(Field)`\nwidth: 200px;\n`;\n\nexport const StyledButton = styled.button`\nheight: 40px;\nwidth: 200px;\nborder: 2px solid black;\nborder-radius: 10px;\n`;\n\nexport const Label = styled.label`\nline-height: 20px;\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\ncolor: red;\n`;","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledButton,\n  Label,\n  StyledField,\n  StyledErrorMessage,\n} from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/phonebook/operations';\nimport { getAllContacts } from 'redux/phonebook/selectors';\n\nconst formSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name must contain only letters, apostrophe, dash, and spaces'\n    )\n    .required('Name is required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Invalid phone number format'\n    )\n    .required('Phone number is required'),\n});\n\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n\n  const addNewContact = contact => {\n    if (checkDuplicate(contact)) {\n      alert('the contact already exists');\n      return;\n    }\n    dispatch(addContact(contact));\n  };\n\n  function checkDuplicate(contact) {\n    return contacts.some(\n      element => contact.name.toLowerCase() === element.name.toLowerCase()\n    );\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={formSchema}\n      onSubmit={(values, { resetForm }) => {\n        addNewContact(values);\n        resetForm();\n      }}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <StyledField name=\"name\" type=\"text\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <StyledField name=\"number\" type=\"tel\" />\n          <StyledErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <StyledButton type=\"submit\">Add contact</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/phonebook/operations';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { AddContactForm } from 'components/Form/Form';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <AddContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n"],"names":["getAllContacts","state","contacts","items","getFilter","filter","FilterBox","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Filter","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","type","name","onChange","e","changeFilter","target","value","Button","CotactItem","Contact","_ref","contact","number","onClick","deleteContact","id","List","ContactList","toLowerCase","includes","map","filtredContact","StyledForm","Form","StyledField","Field","StyledButton","_templateObject3","Label","_templateObject4","StyledErrorMessage","ErrorMessage","_templateObject5","formSchema","Yup","matches","required","AddContactForm","addNewContact","some","element","checkDuplicate","addContact","alert","Formik","initialValues","validationSchema","onSubmit","values","resetForm","component","Contacts","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}